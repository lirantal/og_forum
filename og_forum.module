<?php
// $Id$

/**
 * @file
 * Creates a forum per organic group and restricts viewing forum nodes by group membership.
 */

/**
 * Implementation of hook_help().
 */
function og_forum_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Ties forums to organic groups.');
  }
}

/**
 * Implementation of hook_menu().
 */
function og_forum_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/og/og_forum',
      'title' => t('OG forum'),
      'description' => t('Configure organic group forums.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('og_forum_admin_settings'),
      'access' => user_access('administer site configuration'),
    );
    $items[] = array(
      'path' => 'og_forum',
      'callback' => 'og_forum_page',
      'type' => MENU_CALLBACK,
      'access' => user_access('access content'),
    );
  }
  else {
    // we expect the group nid as 1st argument
    if (is_numeric(arg(2))) {
      // load forum's group
      $group = node_load(arg(2));
      if ($group) {
        if (og_forum_is_admin($group)) {
          $items[] = array(
            'title' => t("manage group's forum"),
            'path' => 'og_forum/manage',
            'callback' => 'og_forum_manage',
            'callback arguments' => array($group),
            'type' => MENU_CALLBACK,
            'access' => user_access('access content'),
          );
        }
      }
    }
    elseif (is_numeric(arg(3)) && is_numeric(arg(4))) {
      if (arg(2) == 'add') {
         $items[] = array(
            'path' => 'og_forum/manage/add',
            'title' => t('add forum'),
            'callback' => 'og_forum_form_forum',
            'callback arguments' => array(array('parent' => arg(4))),
            'access' => user_access('access content'),
            'type' => MENU_CALLBACK
        );
      }
      elseif (arg(2) == 'edit') {
        $term = taxonomy_get_term(arg(4));
        $parents = taxonomy_get_parents($term->tid);
        $parent = array_pop($parents);
        $term->parent = $parent->tid;
        $items[] = array(
            'path' => 'og_forum/manage/edit',
            'title' => t('add forum'),
            'callback' => 'og_forum_form_forum',
            'callback arguments' => array((array)$term),
            'access' => user_access('access content'),
            'type' => MENU_CALLBACK
        );
      }
    }
  }

  return $items;
}

/**
 * Check if a user is a group manager of the given group
 */
function og_forum_is_admin($group) {
  global $user;
  $result = db_query(og_list_users_sql(0), $group->nid);
  $cntall = db_num_rows($result);
  $cntpending = 0;
  while ($row = db_fetch_object($result)) {
    if ($row->uid == $user->uid) {
      if ($row->is_admin > 0) return TRUE;
    }
  }
  return FALSE;
}

/**
 * Menu callback; allows us to set group context prior to
 * loading a forum
 */
function og_forum_page($forum) {
  $gid = $_GET['edit']['og_groups'][0];
  og_set_theme($gid);
  $group = node_load($gid);
  og_set_group_context($group);
  return forum_page($forum);
}

/**
 * Menu callback; configure organic group forums.
 */
function og_forum_admin_settings() {
  $form['#submit']['og_forum_settings_submit'] = array(); // custom submit handler
  $form['#submit']['system_settings_form_submit'] = array(); // form.inc never calls the $callback if a submit handler is defined

  $form['update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Retroactively update old groups'),
    '#description' => t('Pressing this button will create forums for any groups that do not already have them.'),
    '#collapsible' => TRUE,
  );
  $form['update']['button'] = array(
    '#type' => 'submit',
    '#value' => t('Update old groups'),
  );
  return system_settings_form($form);
}

/**
 * Custom submit handler for group update
 */
function og_forum_settings_submit($form_id, $form_values) {
  if ($form_values['op'] == t('Update old groups')) {
    og_forum_retroactively_apply();
  }
}

/**
 * Implementation of hook_db_rewrite_sql().
 *
 * Restricts forum viewing by organic group.
 */
function og_forum_db_rewrite_sql($query, $primary_table = 'n', $primary_field = 'nid') {
  global $user;

  if ($primary_field == 'tid') {

    // Only do this on forum nodes that belong to groups
    if (arg(3)) {
      $result = db_result(db_query("SELECT nid FROM {og_term} WHERE tid = %d", arg(3)));
    }
    if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'forum' && (isset($_GET['gids']) || isset($result))) {
      $restrict = TRUE;
    }

    // If on a forum node, prevent display of all forums; only the ones for this organic group
    // The forum vocab should have a lower weight than any other vocabulary assigned to forum nodes.
    static $og_vocab = FALSE;
    if ($restrict) {
      $return['join'] = "INNER JOIN {og_term} ogt ON $primary_table.tid = ogt.tid INNER JOIN {og_uid} ogu ON ogt.nid = ogu.nid AND ogu.uid = $user->uid";
      $return['where'] = 'ogu.is_active=1';
      if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'forum') {
        $og_nid = intval($_GET['edit']['og_groups'][0]);
        if ($og_nid && !$og_vocab) {
          $og_vocab = TRUE;
          $return['where'] = "ogt.nid = $og_nid";
        }
      }
      $return['distinct'] = TRUE;
      return $return;
    }
    else {
      return NULL;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Automatically creates a forum container and forum each time an organic group is added.
 */
function og_forum_nodeapi($node, $op, $teaser = NULL) {
  switch ($op) {
    case 'prepare':
      if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'forum') {
        if (!isset($_GET['edit']['og_groups'][0])) {
          return FALSE;
        }
      }
      break;
    case 'insert':
      if (og_is_group_type($node->type)) {
        $edit = array('name' => $node->title, 'vid' => _forum_get_vid());
        $status = taxonomy_save_term($edit);
        $containers = variable_get('forum_containers', array());
        $containers[] = $edit['tid'];
        variable_set('forum_containers', $containers);
        db_query('INSERT INTO {og_term} (tid, nid) VALUES (%d, %d)', $edit['tid'], $node->nid);

        $edit['name'] = t('General discussion');
        $edit['parent'] = array($edit['tid']);
        unset($edit['tid']);
        $status = taxonomy_save_term($edit);
        db_query('INSERT INTO {og_term} (tid, nid) VALUES (%d, %d)', $edit['tid'], $node->nid);
      }
      break;
    case 'delete':
      // Delete existing terms for this og
      if (og_is_group_type($node->type)) {
        $result = db_query('SELECT tid FROM {og_term} WHERE nid = %d', $node->nid);
        while ($term = db_fetch_object($result)) {
          taxonomy_del_term($term->tid);
        }
        db_query('DELETE FROM {og_term} WHERE nid = %d', $node->nid);
      }
      break;
  }
}

/**
 * Retrieve container for given group
 *
 * @param $group_id
 *   Organic group ID
 * @return
 *   Forum container's term ID
 */
function og_forum_get_forum_container($group_id) {
  // Grab most first term created for group; this will be the forum container
  return db_result(db_query_range('SELECT tid FROM {og_term} WHERE nid = %d ORDER BY tid ASC', $group_id, 0, 1));
}

/**
 * Implementation of hook_og_create_links().
 */
function og_forum_og_create_links($group) {
  global $user;
  $links = array();

  // Get group's forums
  $forum  = og_forum_get_forum_container($group->nid);
  if ($forum) {
    $links[] = l(t('Group forums'), "og_forum/$forum/$group->nid", array('title' => t('View group forum discussions.')), "edit[og_groups][]=$group->nid");
    // Add forum creation link for the group managers
    if (og_forum_is_admin($group)) {
      $links[] = l(t('Manage group forums'), 'og_forum/manage/'. $group->nid, array('title' => t("Lets you create, edit, and delete group's forums.")));
    }
  }
  return $links;
}

/**
 * Creates forums for all groups that don't have any yet.
 */
function og_forum_retroactively_apply() {
  $counter = 0;
  // Obtain list of all groups
  $result = db_query('SELECT og.nid, n.title, n.type FROM {og} og INNER JOIN {node} n on og.nid = n.nid');
  while ($group = db_fetch_object($result)) {
    // See if terms are found for this group
    if (!db_result(db_query('SELECT * FROM {og_term} ogt WHERE ogt.nid = %d', $group->nid))) {
      // If so, fake a nodeapi insert
      og_forum_nodeapi($group, 'insert');
      $counter++;
    }
  }
  drupal_set_message(t('!num groups had forums created', array('!num' => $counter)));
}

/**
 * Implementation of hook_form_alter().
 */
function og_forum_form_alter($form_id, &$form) {
  // Auto-select group's forum when adding/editing a forum topic
  if ($form_id == 'forum_node_form') {
    $gid = db_result(db_query("SELECT nid FROM {og_term} WHERE tid = %d", arg(3)));
    if (!empty($gid)) {
      $group = node_load($gid);
      og_set_group_context($group);
      $vid = _forum_get_vid();
      $old_form = $form['taxonomy'][$vid];
      foreach ($form['taxonomy'] as $key => $value) {
        if (substr($key, 0, 1) != '#') {
          unset($form['taxonomy'][$key]);
        }
      }
      $form['taxonomy'][$vid] = $old_form;
      if (user_access('administer organic groups') || variable_get('og_audience_checkboxes', TRUE)) {
        $form['og_nodeapi']['visible']['og_groups']['#default_value'][] = $gid;
      }
      else {
        $form['og_nodeapi']['invisible']['og_groups']['#default_value'][] = $gid;
      }
      $form['og_nodeapi']['#collapsed'] = $gid ? TRUE : FALSE;
    }
  }
}

/**
 * Let group managers manage their forums
 */
function og_forum_manage($group) {
  global $user;
  og_set_theme($group->nid);
  og_set_group_context($group);
  // set a nice breadcrumb
  _og_forum_manage_breadcrumb($group);
  $content = '<p>'. t('This page shows the forums associated with the %group group.', array('%group' => $group->title)) .'</p>';
  $og_terms = _og_forum_ogterms($group);
  $header = array(t('Name'), t('Operations'));
  $tree = taxonomy_get_tree(_forum_get_vid());
  if ($tree) {
    foreach ($tree as $term) {
      if (in_array($term->tid, $og_terms)) {
        if (in_array($term->tid, variable_get('forum_containers', array()))) {
          $rows[] = array(str_repeat(' -- ', $term->depth) .' '. check_plain($term->name), l(t('add forum'), "og_forum/manage/add/$group->nid/$term->tid"));
        }
        else {
          $rows[] = array(str_repeat(' -- ', $term->depth) .' '. check_plain($term->name), l(t('edit forum'), "og_forum/manage/edit/$group->nid/$term->tid"));
        }
      }
    }
  }
  $content .= theme('table', $header, $rows);
  return $content;
}

/**
 * Select the right form to display
 */
function og_forum_form_forum($edit = array(), $gid = 0, $tid = 0) {
  og_set_theme($gid);
  $group = node_load($gid);
  og_set_group_context($group);
  _og_forum_manage_breadcrumb($group);
  // Handle a delete operation.
  if ($_POST['op'] == t('Delete') || $_POST['edit']['confirm']) {
    return drupal_get_form('og_forum_confirm_delete', $edit['tid'], $gid);
  }
  return drupal_get_form('og_forum_form', $edit, $gid, $tid);
}

/**
 * Render forum creation form
 */
function og_forum_form($edit = array(), $gid = 0, $tid = 0) {
  $form['name'] = array('#type' => 'textfield',
    '#title' => t('Forum name'),
    '#default_value' => $edit['name'],
    '#maxlength' =>  64,
    '#description' => t('The forum name is used to identify related discussions.'),
    '#required' => TRUE,
  );
  $form['description'] = array('#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $edit['description'],
    '#description' => t('The forum description can give users more information about the discussion topics it contains.'),
  );
  if (arg(2) == 'add') {
    $form['parent'] = array(
      '#type' => 'hidden',
      '#value' => $tid,
    );
  }
  else {
    $form['parent'] = array(
      '#type' => 'hidden',
      '#value' => $edit['parent'],
    );
  }
  $form['group_id'] = array(
    '#type' => 'hidden',
    '#value' => $gid,
  );
  $form['weight'] = array('#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $edit['weight'],
    '#description' => t('When listing forums, those with lighter (smaller) weights get listed before containers with heavier (larger) weights. Forums with equal weights are sorted alphabetically.'),
  );
  $form['vid'] = array('#type' => 'hidden', '#value' => _forum_get_vid());
  $form['submit' ] = array('#type' => 'submit', '#value' => t('Submit'));
  if ($edit['tid']) {
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
    $form['tid'] = array('#type' => 'hidden', '#value' => $edit['tid']);
  }
  return $form;
}

/**
 * Validate group id and term id values
 */
function og_forum_form_validate($form_id, $form_values) {
  global $user;
  $error = true;
  if (is_numeric($form_values['group_id'])) {
    $group = node_load($form_values['group_id']);

    // check that the user is the manager
    if ($group && og_forum_is_admin($group) && (in_array($form_values['parent'], _og_forum_ogterms($group)) || $form_values['tid'])) {
      $error = false;
    }
  }

  // stop insertion if we found invalid values
  if ($error) {
    form_set_error('name', t('Internal error processing your data. Please contact website administrators.'));
  }
}

/**
 * Store created/updated forum on the db
 */
function og_forum_form_submit($form_id, $form_values) {
  $container = false;
  $type = t('forum');

  $status = taxonomy_save_term($form_values);
  switch ($status) {
    case SAVED_NEW:
      if ($container) {
        $containers = variable_get('forum_containers', array());
        $containers[] = $form_values['tid'];
        variable_set('forum_containers', $containers);
      }
      drupal_set_message(t('Created new !type %term.', array('%term' => $form_values['name'], '!type' => $type)));

      // store relation group-forum on the db
      db_query('INSERT INTO {og_term} (tid, nid) VALUES (%d, %d)', $form_values['tid'], $form_values['group_id']);
      break;
    case SAVED_UPDATED:
      drupal_set_message(t('The !type %term has been updated.', array('%term' => $form_values['name'], '!type' => $type)));
      break;
  }
  return 'og_forum/manage/'. $form_values['group_id'];
}

/**
 * Returns a confirmation page for deleting a forum taxonomy term.
 *
 * @param $tid ID of the term to be deleted
 */
function og_forum_confirm_delete($tid, $group_id) {
  $term = taxonomy_get_term($tid);
  $form['tid'] = array('#type' => 'value', '#value' => $tid);
  $form['name'] = array('#type' => 'value', '#value' => $term->name);
  $form['group_id'] = array('#type' => 'value', '#value' => $group_id);
  $form = confirm_form($form, t('Are you sure you want to delete the forum %name?', array('%name' => $term->name)), 'admin/forums', t('Deleting a forum or container will delete all sub-forums and associated posts as well. This action cannot be undone.'), t('Delete'), t('Cancel'));
  return $form;
}

/**
 * Implementation of forms api _submit call. Deletes a forum after confirmation.
 */
function og_forum_confirm_delete_submit($form_id, $form_values) {
  taxonomy_del_term($form_values['tid']);
  drupal_set_message(t('The forum %term and all sub-forums and associated posts have been deleted.', array('%term' => $form_values['name'])));
  watchdog('content', t('forum: deleted %term and all its sub-forums and associated posts.', array('%term' => $form_values['name'])));
  db_query('DELETE FROM {og_term} WHERE tid = %d', $form_values['tid']);
  return 'og_forum/manage/'. $form_values['group_id'];
}

/**
 * Set a nice breadcrumb for the manage pages
 */
function _og_forum_manage_breadcrumb($group) {
  $breadcrumb = array();
  $breadcrumb[] = array(
    'path' => 'forum',
    'title' => $vocabulary->name,
  );
  $breadcrumb[] = array(
    'path' => 'node/'. $group->nid,
    'title' => $group->title,
  );
  $breadcrumb[] = array(
    'path' => 'og_forum/manage/'. $group->nid,
    'title' => t('Manage') .' '. $group->title .' '. t('forums'),
  );
  menu_set_location($breadcrumb);
}

/**
 * get an array containing terms associated to this og
 */
function _og_forum_ogterms($group) {
  $result = db_query('SELECT * FROM {og_term} WHERE nid = %d', $group->nid);

  $og_terms = array();
  while ($term = db_fetch_object($result)) {
    $og_terms[] = $term->tid;
  }
  return $og_terms;
}

